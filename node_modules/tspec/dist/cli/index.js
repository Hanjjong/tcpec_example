#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCli = void 0;
// eslint-disable-next-line import/no-extraneous-dependencies
const yargs_1 = __importDefault(require("yargs"));
// eslint-disable-next-line import/no-extraneous-dependencies
const helpers_1 = require("yargs/helpers");
const generator_1 = require("../generator");
const server_1 = require("../server");
var SupportedSpecVersion;
(function (SupportedSpecVersion) {
    SupportedSpecVersion[SupportedSpecVersion["THREE"] = 3] = "THREE";
})(SupportedSpecVersion || (SupportedSpecVersion = {}));
const defaultArgs = {
    specPathGlobs: ['src/**/*.ts'],
    tsconfigPath: 'tsconfig.json',
    outputPath: undefined,
    specVersion: SupportedSpecVersion.THREE,
    openapi: {
        title: 'Tspec API',
        version: '0.0.1',
        securityDefinitions: undefined,
        servers: undefined,
    },
    debug: undefined,
    ignoreErrors: undefined,
};
const generatorOptions = {
    specPathGlobs: { type: 'array', default: defaultArgs.specPathGlobs },
    tsconfigPath: { type: 'string', default: defaultArgs.tsconfigPath },
    outputPath: { type: 'string', default: defaultArgs.outputPath },
    specVersion: { type: 'number' },
    openapiTitle: { type: 'string', default: defaultArgs.openapi.title },
    openapiVersion: { type: 'string', default: defaultArgs.openapi.version },
    debug: { type: 'boolean', default: defaultArgs.debug },
    ignoreErrors: { type: 'boolean', default: defaultArgs.ignoreErrors },
};
const runServerOptions = {
    ...generatorOptions,
    port: { type: 'number', default: 7000 },
    proxyHost: { type: 'string' },
};
const validateGeneratorOptions = (args) => {
    var _a;
    if (args.specVersion && !Object.values(SupportedSpecVersion).includes(args.specVersion)) {
        // eslint-disable-next-line max-len
        throw new Error(`Tspec currently supports only OpenAPI Spec with version ${Object.values(SupportedSpecVersion).join(', ')}.`);
    }
    const generateTspecParams = {
        specPathGlobs: args.specPathGlobs.length > 0
            ? args.specPathGlobs.map((glob) => glob.toString())
            : defaultArgs.specPathGlobs,
        tsconfigPath: args.tsconfigPath,
        outputPath: args.outputPath,
        specVersion: ((_a = args.specVersion) !== null && _a !== void 0 ? _a : defaultArgs.specVersion),
        openapi: {
            title: args.openapiTitle,
            version: args.openapiVersion,
            securityDefinitions: defaultArgs.openapi.securityDefinitions,
            servers: defaultArgs.openapi.servers,
        },
        debug: args.debug,
        ignoreErrors: args.ignoreErrors,
    };
    return generateTspecParams;
};
const specGenerator = async (args) => {
    const generateTspecParams = validateGeneratorOptions(args);
    generateTspecParams.outputPath || (generateTspecParams.outputPath = 'openapi.json');
    await (0, generator_1.generateTspec)(generateTspecParams);
};
const startTspecServer = async (args) => {
    const generateTspecParams = validateGeneratorOptions(args);
    (0, server_1.initTspecServer)(generateTspecParams);
};
const runCli = async () => (0, yargs_1.default)((0, helpers_1.hideBin)(process.argv))
    .usage('Usage: $0 <command> [options]')
    .command('generate', 'Generate OpenAPI Spec from Tspec', generatorOptions, (yargs) => specGenerator(yargs))
    .command('server', 'Start Tspec server', runServerOptions, (yargs) => startTspecServer(yargs))
    .help('help')
    .alias('help', 'h')
    .parse();
exports.runCli = runCli;
if (require.main === module) {
    (0, exports.runCli)();
}
//# sourceMappingURL=index.js.map