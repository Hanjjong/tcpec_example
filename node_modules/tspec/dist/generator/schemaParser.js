"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getObjectPropertyByPath = exports.getTextListPropertyByPath = exports.getTextPropertyByPath = exports.accessProperty = exports.accessSchema = void 0;
const accessSchema = (obj, schemas) => {
    if (!obj) {
        return undefined;
    }
    if ('$ref' in obj) {
        const [, schemaName] = obj.$ref.split('#/components/schemas/');
        return schemas[schemaName];
    }
    return obj;
};
exports.accessSchema = accessSchema;
const accessProperty = (obj, key, schemas) => {
    var _a;
    const schema = (0, exports.accessSchema)(obj, schemas);
    if (!schema) {
        return undefined;
    }
    const combinedSchema = schema.allOf || schema.oneOf || schema.anyOf;
    if (combinedSchema) {
        return combinedSchema.map((o) => (0, exports.accessProperty)(o, key, schemas)).find((o) => o);
    }
    const value = (_a = schema.properties) === null || _a === void 0 ? void 0 : _a[key];
    return value && (0, exports.accessSchema)(value, schemas);
};
exports.accessProperty = accessProperty;
const getPropertyByPath = (obj, path, schemas) => {
    const [first, ...rest] = path.split('.');
    const firstValue = (0, exports.accessProperty)(obj, first, schemas);
    if (rest.length === 0) {
        return firstValue;
    }
    return getPropertyByPath(firstValue, rest.join('.'), schemas);
};
const getText = (obj) => {
    var _a;
    if (!obj || '$ref' in obj || obj.type !== 'string' || ((_a = obj.enum) === null || _a === void 0 ? void 0 : _a.length) !== 1) {
        return undefined;
    }
    return obj.enum[0];
};
const getTextPropertyByPath = (obj, path, schemas, options) => {
    const text = getText(getPropertyByPath(obj, path, schemas));
    if ((options === null || options === void 0 ? void 0 : options.required) === true && !text) {
        throw new Error(`Invalid '${path}' in ApiSpec`);
    }
    return text;
};
exports.getTextPropertyByPath = getTextPropertyByPath;
const getTextListPropertyByPath = (obj, path, schemas, options) => {
    const value = getPropertyByPath(obj, path, schemas);
    if (!value || '$ref' in value || value.type !== 'array' || !value.items) {
        if ((options === null || options === void 0 ? void 0 : options.required) === true) {
            throw new Error(`Invalid '${path}' in ApiSpec`);
        }
        return [];
    }
    return value.items
        .map((item) => getText(item)).filter((item) => !!item);
};
exports.getTextListPropertyByPath = getTextListPropertyByPath;
const getObjectPropertyByPath = (obj, path, schemas, options) => {
    const value = getPropertyByPath(obj, path, schemas);
    if (!value || '$ref' in value || value.type !== 'object' || !value.properties) {
        if ((options === null || options === void 0 ? void 0 : options.required) === true) {
            throw new Error(`Invalid '${path}' in ${JSON.stringify(obj)}; value: ${JSON.stringify(value)}`);
        }
        return undefined;
    }
    return { ...value, properties: value.properties };
};
exports.getObjectPropertyByPath = getObjectPropertyByPath;
//# sourceMappingURL=schemaParser.js.map