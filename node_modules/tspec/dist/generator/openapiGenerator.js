"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOpenapiPaths = exports.DEBUG = void 0;
const debug_1 = __importDefault(require("debug"));
const types_1 = require("../utils/types");
const schemaParser_1 = require("./schemaParser");
exports.DEBUG = (0, debug_1.default)('tspec');
const getPathOrQueryParams = (obj, inType) => {
    const { properties, required } = obj;
    if (!properties) {
        return undefined;
    }
    return Object.entries(properties).map(([key, schema]) => {
        const { description, examples, ...rest } = schema;
        return {
            description,
            name: key,
            in: inType,
            required: inType === 'path' ? true : (required || []).includes(key),
            schema: rest,
            example: Array.isArray(examples) ? examples[0] : examples, // FIXME: tjs does not support example.
        };
    });
};
const resolveParameters = (path, query) => {
    const pathParams = (path && getPathOrQueryParams(path, 'path')) || [];
    const queryParams = (query && getPathOrQueryParams(query, 'query')) || [];
    return [...pathParams, ...queryParams];
};
const getOpenapiPaths = (openapiSchemas, tspecSymbols) => {
    const openapiPaths = {};
    const specs = tspecSymbols.flatMap((tspecSymbol) => {
        const paths = openapiSchemas[tspecSymbol].properties || {};
        return Object.keys(paths).flatMap((path) => {
            var _a;
            const methods = ((_a = (0, schemaParser_1.accessSchema)(paths[path], openapiSchemas)) === null || _a === void 0 ? void 0 : _a.properties) || {};
            return Object.keys(methods).map((method) => {
                const spec = (0, schemaParser_1.accessSchema)(methods[method], openapiSchemas);
                (0, types_1.assertIsDefined)(spec);
                return {
                    controllerName: tspecSymbol, path, method, spec,
                };
            });
        });
    });
    specs.forEach(({ controllerName, path, method, spec, }) => {
        (0, exports.DEBUG)({ controllerName, path, method });
        const url = (0, schemaParser_1.getTextPropertyByPath)(spec, 'url', openapiSchemas, { required: true });
        const summary = (0, schemaParser_1.getTextPropertyByPath)(spec, 'summary', openapiSchemas);
        const security = (0, schemaParser_1.getTextPropertyByPath)(spec, 'security', openapiSchemas);
        const tags = (0, schemaParser_1.getTextListPropertyByPath)(spec, 'tags', openapiSchemas);
        const responses = (0, schemaParser_1.getObjectPropertyByPath)(spec, 'responses', openapiSchemas, { required: true }).properties;
        const pathParams = (0, schemaParser_1.getObjectPropertyByPath)(spec, 'path', openapiSchemas);
        const queryParams = (0, schemaParser_1.getObjectPropertyByPath)(spec, 'query', openapiSchemas);
        const bodyParams = (0, schemaParser_1.getObjectPropertyByPath)(spec, 'body', openapiSchemas);
        const operation = {
            operationId: `${controllerName}_${method}_${path}`,
            tags,
            summary,
            security: security && [{ [security]: [] }],
            parameters: resolveParameters(pathParams, queryParams),
            requestBody: bodyParams && {
                description: bodyParams.description,
                required: true,
                content: {
                    'application/json': {
                        schema: bodyParams,
                    },
                },
            },
            responses: Object.fromEntries(Object.entries(responses).map(([code, schema]) => {
                const resSchema = {
                    description: schema.description || '',
                    content: {
                        'application/json': {
                            schema,
                        },
                    },
                };
                return [code, resSchema];
            })),
        };
        (openapiPaths[url] || (openapiPaths[url] = {}))[method] = operation;
    });
    return openapiPaths;
};
exports.getOpenapiPaths = getOpenapiPaths;
//# sourceMappingURL=openapiGenerator.js.map